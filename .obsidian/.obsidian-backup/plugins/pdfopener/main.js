/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Opener
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// node_modules/monkey-around/mjs/index.js
function around(obj, factories) {
  const removers = Object.keys(factories).map((key) => around1(obj, key, factories[key]));
  return removers.length === 1 ? removers[0] : function() {
    removers.forEach((r) => r());
  };
}
function around1(obj, method, createWrapper) {
  const original = obj[method], hadOwn = obj.hasOwnProperty(method);
  let current = createWrapper(original);
  if (original)
    Object.setPrototypeOf(current, original);
  Object.setPrototypeOf(wrapper, current);
  obj[method] = wrapper;
  return remove;
  function wrapper(...args) {
    if (current === original && obj[method] === wrapper)
      remove();
    return current.apply(this, args);
  }
  function remove() {
    if (obj[method] === wrapper) {
      if (hadOwn)
        obj[method] = original;
      else
        delete obj[method];
    }
    if (current === original)
      return;
    current = original;
    Object.setPrototypeOf(wrapper, original || Function);
  }
}

// settings.ts
var import_obsidian = require("obsidian");
var OpenerSettingTab = class extends import_obsidian.PluginSettingTab {
  display() {
    const { containerEl } = this;
    const plugin = this.plugin;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("New Tab Default").setDesc(
      "Enable to open new files in a new tab (or existing tab, if it was previously opened). Disable for default Obsidian behavior."
    ).addToggle(
      (toggle) => toggle.setValue(plugin.settings.newTab).onChange((value) => {
        plugin.settings.newTab = value;
        plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("PDF Default App").setDesc(
      "Enable to open pdfs with system viewer app. Disable for default behavior (open pdfs in Obsidian)."
    ).addToggle(
      (toggle) => toggle.setValue(plugin.settings.PDFApp).onChange((value) => {
        plugin.settings.PDFApp = value;
        plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Default app only when Ctrl/Cmd-Key is held").setDesc(
      "Open in default app only when Ctrl/Cmd-Key is held. Disable to always\u201A open with system viewer."
    ).addToggle(
      (toggle) => toggle.setValue(plugin.settings.extOnlyWhenMetaKey).onChange((value) => {
        plugin.settings.extOnlyWhenMetaKey = value;
        plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Open everything outside of Obsidian").setDesc(
      "Enable to open all obsidian supported extensions with system viewer instead. Disable for default behavior (open within Obsidian). Defaults supported extensions are 'png', 'webp', 'jpg', 'jpeg', 'gif', 'bmp', 'svg', 'mp3', 'webm', 'wav', 'm4a', 'ogg','3gp', 'flac', 'mp4', 'ogv', 'mov', 'mkv'."
    ).addToggle(
      (toggle) => toggle.setValue(plugin.settings.allExt).onChange((value) => {
        plugin.settings.allExt = value;
        plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Open Outside Obsidian: Manual List").setDesc("This shouldn't be necessary, but you can manually enable custom extensions here.").addToggle(
      (toggle) => toggle.setValue(plugin.settings.custExt).onChange((value) => {
        plugin.settings.custExt = value;
        plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Open Outside Obsidian: Manual List").setDesc("Enter extension names (without the dot, ie, just docx separated by newlines).").addTextArea((textArea) => {
      textArea.setValue(plugin.settings.custExtList.join("\n")).onChange(async (value) => {
        plugin.settings.custExtList = value.split("\n");
        plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Open Inside Obsidian: Manual List").setDesc("For example, if you're using HTMLViewer plugin that lets you view HTML inside Obsidian.").addToggle(
      (toggle) => toggle.setValue(plugin.settings.custExtIn).onChange((value) => {
        plugin.settings.custExtIn = value;
        plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Open Inside Obsidian: Manual List").setDesc("Enter extension names (without the dot, ie, just docx separated by newlines).").addTextArea((textArea) => {
      textArea.setValue(plugin.settings.custExtInList.join("\n")).onChange(async (value) => {
        plugin.settings.custExtInList = value.split("\n");
        plugin.saveSettings();
      });
    });
  }
};

// constants.ts
var DEFAULT_SETTINGS = {
  newTab: true,
  PDFApp: true,
  extOnlyWhenMetaKey: true,
  allExt: false,
  custExt: false,
  custExtList: [],
  custExtIn: false,
  custExtInList: []
};

// main.ts
var Opener = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.isMetaKeyHeld = null;
    this.sameTabOnce = false;
    // Meta key listeners
    // arrow syntax to preserve `this` context
    this.keyDownHandler = (e) => {
      if (e.key === "Meta" || e.key === "Control") {
        this.isMetaKeyHeld = true;
      }
    };
    this.keyUpHandler = (e) => {
      if (e.key === "Meta" || e.key === "Control") {
        this.isMetaKeyHeld = false;
      }
    };
    // Mouse handler is needed because the key handler will not fire if the app is out of focus
    this.mouseDownHandler = (e) => {
      if (e.metaKey || e.ctrlKey) {
        this.isMetaKeyHeld = true;
      } else {
        this.isMetaKeyHeld = false;
      }
    };
  }
  async onload() {
    console.log("loading " + this.manifest.name + " plugin");
    await this.loadSettings();
    this.addSettingTab(new OpenerSettingTab(this.app, this));
    this.updateMetaKeyListeners();
    this.monkeyPatchOpenFile();
    this.addCommands();
    this.addMenuItem();
  }
  onunload() {
    this.uninstallMonkeyPatchOpenFile && this.uninstallMonkeyPatchOpenFile();
    this.removeMetaKeyListeners();
    console.log("unloading " + this.manifest.name + " plugin");
  }
  async loadSettings() {
    const data = await this.loadData();
    this.settings = Object.assign({}, DEFAULT_SETTINGS, data);
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.updateMetaKeyListeners();
  }
  addCommands() {
    this.addCommand({
      id: "same-tab-once",
      name: "Open next file in same tab (Obsidian default behavior)",
      checkCallback: (checking) => {
        if (checking) {
          return this.settings.newTab;
        }
        this.sameTabOnce = true;
        new import_obsidian2.Notice("Next file will open in same tab");
      }
    });
    this.addCommand({
      id: "enable-new-tab",
      name: "Enable new tab for all files",
      checkCallback: (checking) => {
        if (checking) {
          return !this.settings.newTab;
        }
        this.settings.newTab = true;
        this.saveSettings();
        new import_obsidian2.Notice("Opener: New tab for all files enabled");
      }
    });
    this.addCommand({
      id: "disable-new-tab",
      name: "Disable new tab for all files",
      checkCallback: (checking) => {
        if (checking) {
          return this.settings.newTab;
        }
        this.settings.newTab = false;
        this.saveSettings();
        new import_obsidian2.Notice("Opener: New tab for all files disabled");
      }
    });
    this.addCommand({
      id: "enable-pdf",
      name: "Enable open all PDFs with default app",
      checkCallback: (checking) => {
        if (checking) {
          return !this.settings.PDFApp;
        }
        this.settings.PDFApp = true;
        this.saveSettings();
        new import_obsidian2.Notice("Opener: Open all PDFs with default app enabled");
      }
    });
    this.addCommand({
      id: "disable-pdf",
      name: "Disable open all PDFs with default app",
      checkCallback: (checking) => {
        if (checking) {
          return this.settings.PDFApp;
        }
        this.settings.PDFApp = false;
        this.saveSettings();
        new import_obsidian2.Notice("Opener: Open all PDFs with default app disabled");
      }
    });
    this.addCommand({
      id: "open-graph-view-in-new-tab",
      name: "Open Graph View in new tab",
      callback: () => {
        this.app.commands.executeCommandById("workspace:new-tab");
        this.app.commands.executeCommandById("graph:open");
      }
    });
  }
  // add command to right-click menu
  addMenuItem() {
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file, source, leaf) => {
        if (file instanceof import_obsidian2.TFile) {
          menu.addItem((item) => {
            item.setSection("open");
            item.setTitle("Open in same tab").onClick(() => {
              this.sameTabOnce = true;
              this.app.workspace.getLeaf().openFile(file);
            });
          });
        }
      })
    );
  }
  addMetaKeyListeners() {
    if (this.isMetaKeyHeld !== null)
      return;
    this.isMetaKeyHeld = false;
    document.addEventListener("keydown", this.keyDownHandler);
    document.addEventListener("keyup", this.keyUpHandler);
    document.addEventListener("mousedown", this.mouseDownHandler, { capture: true });
  }
  removeMetaKeyListeners() {
    if (this.isMetaKeyHeld === null)
      return;
    document.removeEventListener("keydown", this.keyDownHandler);
    document.removeEventListener("keyup", this.keyUpHandler);
    document.removeEventListener("mousedown", this.mouseDownHandler, { capture: true });
    this.isMetaKeyHeld = null;
  }
  updateMetaKeyListeners() {
    if (this.settings.extOnlyWhenMetaKey) {
      this.addMetaKeyListeners();
    } else {
      this.removeMetaKeyListeners();
    }
  }
  monkeyPatchOpenFile() {
    const parentThis = this;
    this.uninstallMonkeyPatchOpenFile = around(import_obsidian2.WorkspaceLeaf.prototype, {
      openFile(oldOpenFile) {
        return async function(file, openState) {
          var _a, _b, _c, _d, _e;
          const defaultBehavior = () => {
            return oldOpenFile.apply(this, [file, openState]);
          };
          if ((_a = openState == null ? void 0 : openState.state) == null ? void 0 : _a.mode) {
            return defaultBehavior();
          }
          if (file.path == ((_b = app.workspace.getActiveFile()) == null ? void 0 : _b.path)) {
            return defaultBehavior();
          }
          if (parentThis.sameTabOnce) {
            parentThis.sameTabOnce = false;
            return defaultBehavior();
          }
          const ALLEXT = ["png", "webp", "jpg", "jpeg", "gif", "bmp", "svg", "mp3", "webm", "wav", "m4a", "ogg", "3gp", "flac", "mp4", "ogv", "mov", "mkv"];
          const OBSID_OPENABLE = ALLEXT.concat(["md", "canvas", "pdf"]);
          if (parentThis.settings.PDFApp && file.extension == "pdf" || parentThis.settings.allExt && ALLEXT.includes(file.extension) || parentThis.settings.custExt && parentThis.settings.custExtList.includes(file.extension) || !OBSID_OPENABLE.includes(file.extension) && (!parentThis.settings.custExtIn || parentThis.settings.custExtIn && !parentThis.settings.custExtInList.includes(file.extension))) {
            if (!parentThis.settings.extOnlyWhenMetaKey || parentThis.isMetaKeyHeld) {
              new import_obsidian2.Notice("Opening external file with default app (Opener Plugin)");
              app.openWithDefaultApp(file.path);
              return;
            } else {
              new import_obsidian2.Notice("Opener Tip: Hold Cmd/Ctrl key to open with default app");
            }
          }
          if (!parentThis.settings.newTab) {
            return defaultBehavior();
          }
          if (this.group) {
            new import_obsidian2.Notice("Opener: This is a Linked Tab! Opening in same tab therefore.");
            return defaultBehavior();
          }
          let openElsewhere = false;
          const switchToTabIfMatching = (leaf) => {
            var _a2, _b2;
            if (((_a2 = leaf.getViewState().state) == null ? void 0 : _a2.file) == file.path && leaf.getViewState().type != "canvas") {
              oldOpenFile.apply(leaf, [file, openState]);
              openElsewhere = true;
              if (leaf !== this && ((_b2 = this.getViewState()) == null ? void 0 : _b2.type) == "empty") {
                this.detach();
              }
            }
          };
          app.workspace.iterateRootLeaves(switchToTabIfMatching);
          (_e = (_d = (_c = app.workspace.getLayout()) == null ? void 0 : _c.floating) == null ? void 0 : _d.children) == null ? void 0 : _e.forEach((win) => {
            var _a2;
            if ((win == null ? void 0 : win.type) !== "window")
              return console.log("Opener-Plugin: Strange floating object found (no window)", win);
            (_a2 = win.children) == null ? void 0 : _a2.forEach((tabs) => {
              var _a3;
              if ((tabs == null ? void 0 : tabs.type) !== "tabs")
                return console.log("Opener-Plugin: Strange floating object found (no tabs)", tabs);
              (_a3 = tabs.children) == null ? void 0 : _a3.forEach((leaf) => {
                if ((leaf == null ? void 0 : leaf.type) !== "leaf")
                  return console.log("Opener-Plugin: Strange floating object found (no leaf)", leaf);
                switchToTabIfMatching(app.workspace.getLeafById(leaf.id));
              });
            });
          });
          if (openElsewhere)
            return;
          const emptyLeaves = app.workspace.getLeavesOfType("empty");
          if (emptyLeaves.length > 0) {
            return oldOpenFile.apply(emptyLeaves[0], [file, openState]);
          }
          return oldOpenFile.apply(this.app.workspace.getLeaf("tab"), [
            file,
            openState
          ]);
        };
      }
    });
  }
};
